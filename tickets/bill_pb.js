// source: tickets/bill.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_common_entity_pb = require('../common/common_entity_pb.js');
goog.object.extend(proto, common_common_entity_pb);
goog.exportSymbol('proto.services.Reply', null, global);
goog.exportSymbol('proto.services.ReplyListRequest', null, global);
goog.exportSymbol('proto.services.ReplyListResponse', null, global);
goog.exportSymbol('proto.services.Ticket', null, global);
goog.exportSymbol('proto.services.TicketListRequest', null, global);
goog.exportSymbol('proto.services.TicketListResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.Ticket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.Ticket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.Ticket.displayName = 'proto.services.Ticket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.Reply.displayName = 'proto.services.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.TicketListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.TicketListRequest.repeatedFields_, null);
};
goog.inherits(proto.services.TicketListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.TicketListRequest.displayName = 'proto.services.TicketListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ReplyListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.ReplyListRequest.repeatedFields_, null);
};
goog.inherits(proto.services.ReplyListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.ReplyListRequest.displayName = 'proto.services.ReplyListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.TicketListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.TicketListResponse.repeatedFields_, null);
};
goog.inherits(proto.services.TicketListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.TicketListResponse.displayName = 'proto.services.TicketListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ReplyListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.ReplyListResponse.repeatedFields_, null);
};
goog.inherits(proto.services.ReplyListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.ReplyListResponse.displayName = 'proto.services.ReplyListResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.Ticket.prototype.toObject = function(opt_includeInstance) {
  return proto.services.Ticket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.Ticket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.Ticket.toObject = function(includeInstance, msg) {
  var f, obj = {
    identity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userIdentity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    replyUserIdentity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    createTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    refreshTime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    message: jspb.Message.getFieldWithDefault(msg, 9, ""),
    images: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.Ticket}
 */
proto.services.Ticket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.Ticket;
  return proto.services.Ticket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.Ticket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.Ticket}
 */
proto.services.Ticket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdentity(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserIdentity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplyUserIdentity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRefreshTime(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setImages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.Ticket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.Ticket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.Ticket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.Ticket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentity();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserIdentity();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getReplyUserIdentity();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getRefreshTime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getImages();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int64 identity = 1;
 * @return {number}
 */
proto.services.Ticket.prototype.getIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Ticket} returns this
 */
proto.services.Ticket.prototype.setIdentity = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 user_identity = 2;
 * @return {number}
 */
proto.services.Ticket.prototype.getUserIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Ticket} returns this
 */
proto.services.Ticket.prototype.setUserIdentity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 reply_user_identity = 4;
 * @return {number}
 */
proto.services.Ticket.prototype.getReplyUserIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Ticket} returns this
 */
proto.services.Ticket.prototype.setReplyUserIdentity = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 type = 5;
 * @return {number}
 */
proto.services.Ticket.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Ticket} returns this
 */
proto.services.Ticket.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 status = 6;
 * @return {number}
 */
proto.services.Ticket.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Ticket} returns this
 */
proto.services.Ticket.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 create_time = 7;
 * @return {number}
 */
proto.services.Ticket.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Ticket} returns this
 */
proto.services.Ticket.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 refresh_time = 8;
 * @return {number}
 */
proto.services.Ticket.prototype.getRefreshTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Ticket} returns this
 */
proto.services.Ticket.prototype.setRefreshTime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string message = 9;
 * @return {string}
 */
proto.services.Ticket.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.Ticket} returns this
 */
proto.services.Ticket.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string images = 10;
 * @return {string}
 */
proto.services.Ticket.prototype.getImages = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.Ticket} returns this
 */
proto.services.Ticket.prototype.setImages = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.services.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    identity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userIdentity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ticketIdentity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    createTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    message: jspb.Message.getFieldWithDefault(msg, 9, ""),
    images: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.Reply}
 */
proto.services.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.Reply;
  return proto.services.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.Reply}
 */
proto.services.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdentity(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserIdentity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTicketIdentity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setImages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentity();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserIdentity();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTicketIdentity();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getImages();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int64 identity = 1;
 * @return {number}
 */
proto.services.Reply.prototype.getIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Reply} returns this
 */
proto.services.Reply.prototype.setIdentity = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 user_identity = 2;
 * @return {number}
 */
proto.services.Reply.prototype.getUserIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Reply} returns this
 */
proto.services.Reply.prototype.setUserIdentity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 ticket_identity = 4;
 * @return {number}
 */
proto.services.Reply.prototype.getTicketIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Reply} returns this
 */
proto.services.Reply.prototype.setTicketIdentity = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 create_time = 7;
 * @return {number}
 */
proto.services.Reply.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.Reply} returns this
 */
proto.services.Reply.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string message = 9;
 * @return {string}
 */
proto.services.Reply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.Reply} returns this
 */
proto.services.Reply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string images = 10;
 * @return {string}
 */
proto.services.Reply.prototype.getImages = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.Reply} returns this
 */
proto.services.Reply.prototype.setImages = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.TicketListRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.TicketListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.TicketListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.TicketListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.TicketListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdentity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    listInfo: (f = msg.getListInfo()) && common_common_entity_pb.ListInfo.toObject(includeInstance, f),
    orderByList: jspb.Message.toObjectList(msg.getOrderByList(),
    common_common_entity_pb.OrderByRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.TicketListRequest}
 */
proto.services.TicketListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.TicketListRequest;
  return proto.services.TicketListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.TicketListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.TicketListRequest}
 */
proto.services.TicketListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserIdentity(value);
      break;
    case 4:
      var value = new common_common_entity_pb.ListInfo;
      reader.readMessage(value,common_common_entity_pb.ListInfo.deserializeBinaryFromReader);
      msg.setListInfo(value);
      break;
    case 5:
      var value = new common_common_entity_pb.OrderByRequest;
      reader.readMessage(value,common_common_entity_pb.OrderByRequest.deserializeBinaryFromReader);
      msg.addOrderBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.TicketListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.TicketListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.TicketListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.TicketListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdentity();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getListInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_common_entity_pb.ListInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderByList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      common_common_entity_pb.OrderByRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 user_identity = 2;
 * @return {number}
 */
proto.services.TicketListRequest.prototype.getUserIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.TicketListRequest} returns this
 */
proto.services.TicketListRequest.prototype.setUserIdentity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ListInfo list_info = 4;
 * @return {?proto.services.ListInfo}
 */
proto.services.TicketListRequest.prototype.getListInfo = function() {
  return /** @type{?proto.services.ListInfo} */ (
    jspb.Message.getWrapperField(this, common_common_entity_pb.ListInfo, 4));
};


/**
 * @param {?proto.services.ListInfo|undefined} value
 * @return {!proto.services.TicketListRequest} returns this
*/
proto.services.TicketListRequest.prototype.setListInfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.TicketListRequest} returns this
 */
proto.services.TicketListRequest.prototype.clearListInfo = function() {
  return this.setListInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.TicketListRequest.prototype.hasListInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated OrderByRequest order_by = 5;
 * @return {!Array<!proto.services.OrderByRequest>}
 */
proto.services.TicketListRequest.prototype.getOrderByList = function() {
  return /** @type{!Array<!proto.services.OrderByRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_entity_pb.OrderByRequest, 5));
};


/**
 * @param {!Array<!proto.services.OrderByRequest>} value
 * @return {!proto.services.TicketListRequest} returns this
*/
proto.services.TicketListRequest.prototype.setOrderByList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.services.OrderByRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.OrderByRequest}
 */
proto.services.TicketListRequest.prototype.addOrderBy = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.services.OrderByRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.TicketListRequest} returns this
 */
proto.services.TicketListRequest.prototype.clearOrderByList = function() {
  return this.setOrderByList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.ReplyListRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ReplyListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ReplyListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ReplyListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ReplyListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdentity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    listInfo: (f = msg.getListInfo()) && common_common_entity_pb.ListInfo.toObject(includeInstance, f),
    orderByList: jspb.Message.toObjectList(msg.getOrderByList(),
    common_common_entity_pb.OrderByRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ReplyListRequest}
 */
proto.services.ReplyListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ReplyListRequest;
  return proto.services.ReplyListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ReplyListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ReplyListRequest}
 */
proto.services.ReplyListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserIdentity(value);
      break;
    case 4:
      var value = new common_common_entity_pb.ListInfo;
      reader.readMessage(value,common_common_entity_pb.ListInfo.deserializeBinaryFromReader);
      msg.setListInfo(value);
      break;
    case 5:
      var value = new common_common_entity_pb.OrderByRequest;
      reader.readMessage(value,common_common_entity_pb.OrderByRequest.deserializeBinaryFromReader);
      msg.addOrderBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ReplyListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ReplyListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ReplyListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ReplyListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdentity();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getListInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_common_entity_pb.ListInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderByList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      common_common_entity_pb.OrderByRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 user_identity = 2;
 * @return {number}
 */
proto.services.ReplyListRequest.prototype.getUserIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.ReplyListRequest} returns this
 */
proto.services.ReplyListRequest.prototype.setUserIdentity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ListInfo list_info = 4;
 * @return {?proto.services.ListInfo}
 */
proto.services.ReplyListRequest.prototype.getListInfo = function() {
  return /** @type{?proto.services.ListInfo} */ (
    jspb.Message.getWrapperField(this, common_common_entity_pb.ListInfo, 4));
};


/**
 * @param {?proto.services.ListInfo|undefined} value
 * @return {!proto.services.ReplyListRequest} returns this
*/
proto.services.ReplyListRequest.prototype.setListInfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.ReplyListRequest} returns this
 */
proto.services.ReplyListRequest.prototype.clearListInfo = function() {
  return this.setListInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ReplyListRequest.prototype.hasListInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated OrderByRequest order_by = 5;
 * @return {!Array<!proto.services.OrderByRequest>}
 */
proto.services.ReplyListRequest.prototype.getOrderByList = function() {
  return /** @type{!Array<!proto.services.OrderByRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_entity_pb.OrderByRequest, 5));
};


/**
 * @param {!Array<!proto.services.OrderByRequest>} value
 * @return {!proto.services.ReplyListRequest} returns this
*/
proto.services.ReplyListRequest.prototype.setOrderByList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.services.OrderByRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.OrderByRequest}
 */
proto.services.ReplyListRequest.prototype.addOrderBy = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.services.OrderByRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.ReplyListRequest} returns this
 */
proto.services.ReplyListRequest.prototype.clearOrderByList = function() {
  return this.setOrderByList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.TicketListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.TicketListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.TicketListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.TicketListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.TicketListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.services.Ticket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.TicketListResponse}
 */
proto.services.TicketListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.TicketListResponse;
  return proto.services.TicketListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.TicketListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.TicketListResponse}
 */
proto.services.TicketListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Ticket;
      reader.readMessage(value,proto.services.Ticket.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.TicketListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.TicketListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.TicketListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.TicketListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.services.Ticket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Ticket data = 1;
 * @return {!Array<!proto.services.Ticket>}
 */
proto.services.TicketListResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.services.Ticket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.services.Ticket, 1));
};


/**
 * @param {!Array<!proto.services.Ticket>} value
 * @return {!proto.services.TicketListResponse} returns this
*/
proto.services.TicketListResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.services.Ticket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.Ticket}
 */
proto.services.TicketListResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.services.Ticket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.TicketListResponse} returns this
 */
proto.services.TicketListResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.ReplyListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ReplyListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ReplyListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ReplyListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ReplyListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: (f = msg.getTicket()) && proto.services.Ticket.toObject(includeInstance, f),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.services.Reply.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ReplyListResponse}
 */
proto.services.ReplyListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ReplyListResponse;
  return proto.services.ReplyListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ReplyListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ReplyListResponse}
 */
proto.services.ReplyListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Ticket;
      reader.readMessage(value,proto.services.Ticket.deserializeBinaryFromReader);
      msg.setTicket(value);
      break;
    case 2:
      var value = new proto.services.Reply;
      reader.readMessage(value,proto.services.Reply.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ReplyListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ReplyListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ReplyListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ReplyListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.services.Reply.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket Ticket = 1;
 * @return {?proto.services.Ticket}
 */
proto.services.ReplyListResponse.prototype.getTicket = function() {
  return /** @type{?proto.services.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.services.Ticket, 1));
};


/**
 * @param {?proto.services.Ticket|undefined} value
 * @return {!proto.services.ReplyListResponse} returns this
*/
proto.services.ReplyListResponse.prototype.setTicket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.ReplyListResponse} returns this
 */
proto.services.ReplyListResponse.prototype.clearTicket = function() {
  return this.setTicket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ReplyListResponse.prototype.hasTicket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Reply data = 2;
 * @return {!Array<!proto.services.Reply>}
 */
proto.services.ReplyListResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.services.Reply>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.services.Reply, 2));
};


/**
 * @param {!Array<!proto.services.Reply>} value
 * @return {!proto.services.ReplyListResponse} returns this
*/
proto.services.ReplyListResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.services.Reply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.Reply}
 */
proto.services.ReplyListResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.services.Reply, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.ReplyListResponse} returns this
 */
proto.services.ReplyListResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


goog.object.extend(exports, proto.services);
