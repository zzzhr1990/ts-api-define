// source: store/cloudstore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_common_entity_pb = require('../common/common_entity_pb.js');
goog.object.extend(proto, common_common_entity_pb);
goog.exportSymbol('proto.services.CloudStore', null, global);
goog.exportSymbol('proto.services.CloudStoreList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.CloudStore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.CloudStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.CloudStore.displayName = 'proto.services.CloudStore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.CloudStoreList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.CloudStoreList.repeatedFields_, null);
};
goog.inherits(proto.services.CloudStoreList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.CloudStoreList.displayName = 'proto.services.CloudStoreList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.CloudStore.prototype.toObject = function(opt_includeInstance) {
  return proto.services.CloudStore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.CloudStore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.CloudStore.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uploaduser: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ctime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    originalafilename: jspb.Message.getFieldWithDefault(msg, 6, ""),
    store: jspb.Message.getFieldWithDefault(msg, 7, 0),
    key: jspb.Message.getFieldWithDefault(msg, 8, ""),
    type: jspb.Message.getFieldWithDefault(msg, 9, 0),
    preview: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    previewtype: jspb.Message.getFieldWithDefault(msg, 11, 0),
    flag: jspb.Message.getFieldWithDefault(msg, 12, 0),
    downloadaddress: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.CloudStore}
 */
proto.services.CloudStore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.CloudStore;
  return proto.services.CloudStore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.CloudStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.CloudStore}
 */
proto.services.CloudStore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUploaduser(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCtime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalafilename(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStore(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreview(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPreviewtype(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlag(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownloadaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.CloudStore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.CloudStore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.CloudStore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.CloudStore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUploaduser();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCtime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getOriginalafilename();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStore();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getPreview();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getPreviewtype();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getFlag();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getDownloadaddress();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.services.CloudStore.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.CloudStore.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 size = 2;
 * @return {number}
 */
proto.services.CloudStore.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.services.CloudStore.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string mime = 3;
 * @return {string}
 */
proto.services.CloudStore.prototype.getMime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.CloudStore.prototype.setMime = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 uploadUser = 4;
 * @return {number}
 */
proto.services.CloudStore.prototype.getUploaduser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.services.CloudStore.prototype.setUploaduser = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 ctime = 5;
 * @return {number}
 */
proto.services.CloudStore.prototype.getCtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.services.CloudStore.prototype.setCtime = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string originalaFilename = 6;
 * @return {string}
 */
proto.services.CloudStore.prototype.getOriginalafilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.services.CloudStore.prototype.setOriginalafilename = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 store = 7;
 * @return {number}
 */
proto.services.CloudStore.prototype.getStore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.services.CloudStore.prototype.setStore = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string key = 8;
 * @return {string}
 */
proto.services.CloudStore.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.services.CloudStore.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 type = 9;
 * @return {number}
 */
proto.services.CloudStore.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.services.CloudStore.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool preview = 10;
 * @return {boolean}
 */
proto.services.CloudStore.prototype.getPreview = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.services.CloudStore.prototype.setPreview = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional int32 previewType = 11;
 * @return {number}
 */
proto.services.CloudStore.prototype.getPreviewtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.services.CloudStore.prototype.setPreviewtype = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 flag = 12;
 * @return {number}
 */
proto.services.CloudStore.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.services.CloudStore.prototype.setFlag = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string downloadAddress = 13;
 * @return {string}
 */
proto.services.CloudStore.prototype.getDownloadaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.services.CloudStore.prototype.setDownloadaddress = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.CloudStoreList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.CloudStoreList.prototype.toObject = function(opt_includeInstance) {
  return proto.services.CloudStoreList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.CloudStoreList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.CloudStoreList.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.services.CloudStore.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.CloudStoreList}
 */
proto.services.CloudStoreList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.CloudStoreList;
  return proto.services.CloudStoreList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.CloudStoreList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.CloudStoreList}
 */
proto.services.CloudStoreList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.CloudStore;
      reader.readMessage(value,proto.services.CloudStore.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.CloudStoreList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.CloudStoreList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.CloudStoreList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.CloudStoreList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.services.CloudStore.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CloudStore data = 1;
 * @return {!Array<!proto.services.CloudStore>}
 */
proto.services.CloudStoreList.prototype.getDataList = function() {
  return /** @type{!Array<!proto.services.CloudStore>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.services.CloudStore, 1));
};


/** @param {!Array<!proto.services.CloudStore>} value */
proto.services.CloudStoreList.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.services.CloudStore=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.CloudStore}
 */
proto.services.CloudStoreList.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.services.CloudStore, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.services.CloudStoreList.prototype.clearDataList = function() {
  this.setDataList([]);
};


goog.object.extend(exports, proto.services);
